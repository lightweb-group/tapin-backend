// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id           String        @id @default(uuid())
  phoneNumber  String // Primary identifier for customer in kiosk
  name         String? // Optional, collected later
  totalPoints  Int           @default(0)
  lastCheckIn  DateTime? // Track when customer last checked in
  createdAt    DateTime      @default(now())
  merchant     Merchant?     @relation(fields: [merchantId], references: [id])
  merchantId   String?
  transactions Transaction[]
  updatedAt    DateTime?     @updatedAt

  @@unique([phoneNumber])
  @@map("customers")
}

model Merchant {
  id              String        @id @default(uuid())
  name            String // Business name
  address         String? // Store address
  phoneNumber     String? // Primary identifier for merchant in kiosk
  pointsPerVisit  Int           @default(10) // Base points for each check-in
  pointsPerDollar Float? // Points earned per dollar spent (optional)
  welcomeBonus    Int           @default(0) // Points given to new customers
  customers       Customer[]
  isActive        Boolean       @default(true)
  createdAt       DateTime      @default(now())
  deletedAt       DateTime?
  updatedAt       DateTime?     @updatedAt
  transactions    Transaction[]
  rewards         Reward[]

  @@unique([phoneNumber])
  @@map("merchants")
}

model Transaction {
  id             String          @id @default(uuid())
  merchantId     String
  merchant       Merchant        @relation(fields: [merchantId], references: [id])
  customerId     String
  customer       Customer        @relation(fields: [customerId], references: [id])
  dateTime       DateTime        @default(now())
  pointsChange   Int // Positive for earning, negative for redeeming
  activityType   TransactionType // "EARN", "REDEEM", or "ADJUSTMENT"
  notes          String? // Optional description (e.g., "Purchase $10 = 10 pts")
  purchaseAmount Float? // Amount of purchase, if applicable
  reward         Reward?         @relation("RewardRedemptions", fields: [rewardId], references: [id])
  rewardId       String?

  @@map("transactions")
}

model Reward {
  id           String        @id @default(uuid())
  name         String // e.g., "Free Coffee"
  description  String? // e.g., "One medium coffee of your choice"
  pointsCost   Int // e.g., 50 points
  active       Boolean       @default(true)
  merchantId   String
  merchant     Merchant      @relation(fields: [merchantId], references: [id], onDelete: Cascade)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  transactions Transaction[] @relation("RewardRedemptions")

  @@map("rewards")
}

enum TransactionType {
  EARN // Points earned from a visit or purchase
  REDEEM // Points spent on a reward
  ADJUSTMENT // Manual adjustment by admin/merchant
}
